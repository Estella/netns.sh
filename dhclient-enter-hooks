#!/bin/sh

# The following implementation of make_resolv_conf allows for dhclient to create /etc/resolv.conf within a network namespace
# It was taken from Gentoo and slightly modified
# It is only used when dhclient is called via netns.sh, not during regular system operation

if [ -n "${NETNS}" ]; then

  make_resolv_conf() {
    if [ x"$PEER_DNS" != x ] && [ x"$PEER_DNS" != xyes ]; then
      return 0
    fi
    # Note: local is not POSIX, but apparently supported by most POSIX shells anyway
    local conf=
    if [ x"$new_domain_name_servers" != x ]; then
      if [ "x$new_domain_search" != x ]; then
        conf="${conf}search ${new_domain_search}\n"
      elif [ "x$new_domain_name" != x ]; then
        # Note that the DHCP 'Domain Name Option' is really just a domain
        # name, and that this practice of using the domain name option as
        # a search path is both nonstandard and deprecated.
        conf="${conf}search ${new_domain_name}\n"
      fi
      for nameserver in $new_domain_name_servers; do
        conf="${conf}nameserver ${nameserver}\n"
      done
    elif [ "x${new_dhcp6_name_servers}" != x ] ; then
      if [ "x${new_dhcp6_domain_search}" != x ] ; then
        conf="${conf}search ${new_dhcp6_domain_search}\n"
      fi
      for nameserver in ${new_dhcp6_name_servers} ; do
        # If the nameserver has a link-local address
        # add a <zone_id> (interface name) to it.
        if echo "$nameserver" | grep -Fiq 'fe80::'
        then
          zone_id="%$interface"
        else
          zone_id=
        fi
        conf="${conf}nameserver ${nameserver}$zone_id\n"
      done
    fi

    if [ x"$conf" != x ]; then
      conf="# Generated by dhclient or interface $interface\n${conf}"
      printf "${conf}" > /etc/resolv.conf
      chmod 644 /etc/resolv.conf
    fi
  }

fi
